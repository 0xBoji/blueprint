import { compileFunc } from "@ton-community/func-js";
import { readFileSync } from "fs";
import { Address, beginCell, Cell, Contract, contractAddress, ContractProvider, Sender, SendMode } from "ton-core";

export type {{name}}Config = {

}

export function {{loweredName}}ConfigToCell(config: {{name}}Config): Cell {
    return beginCell()
        .endCell()
}

export async function compile{{name}}(): Promise<Cell> {
    const cr = await compileFunc({
        targets: ['{{contractPath}}'],
        sources: (path: string) => readFileSync(path).toString(),
    })

    if (cr.status === 'error') throw new Error(cr.message)

    return Cell.fromBase64(cr.codeBoc)
}

export class {{name}} implements Contract {
    constructor(
        readonly address: Address,
        readonly init?: { code: Cell, data: Cell },
    ) {}

    static createFromAddress(address: Address) {
        return new {{name}}(address)
    }

    static async createFromConfig(config: {{name}}Config, workchain = 0) {
        const code = await compile{{name}}()
        const data = {{loweredName}}ConfigToCell(config)
        const init = { code, data }
        return new {{name}}(contractAddress(workchain, init), init)
    }

    async sendDeploy(provider: ContractProvider, via: Sender, value: bigint) {
        await provider.internal(via, {
            value,
            sendMode: SendMode.PAY_GAS_SEPARATLY,
            body: beginCell()
                .endCell(),
        })
    }
}